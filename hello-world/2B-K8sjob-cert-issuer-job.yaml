# k create ns cert-poc
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cert-issuer-job
  namespace: acme-cert-poc
spec:
  template:
    metadata:
      name: cert-issuer-job
    spec:
      restartPolicy: Never
      serviceAccountName: cert-issuer-job
      securityContext:
        runAsUser: 0
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: cert-issuer-job
          image: amazon/aws-cli:latest
          volumeMounts:
            - name: certs
              mountPath: /certs
              readOnly: true
          # command: ['sh', '-c', "sleep 3600"]
          env:
          - name: KEY_STORE_ALIAS
            value: "sampleapp"
          - name: KEY_STORE_NAME
            value: "sampleapp"
          - name: KEY_STORE_KEYPASS
            value: "password"
          - name: KEY_STORE_STORE_PASS
            value: "password"
          - name: KEY_STORE_SRC_STORE_PASS
            value: "password"
          - name: KEY_STORE_DIRECTORY
            value: "/keystore-poc"
          - name: CERTS_DIRECTORY
            value: "/certs"
          - name: K8S_APP_SECRET_NAME
            value: "sample-app-jks-secret"
          - name: K8S_APP_NAMESPACE
            value: "acme-cert-poc"
          - name: P12_FILE_NAME
            value: "keystore"
          command:
            - /bin/sh
            - -c
            - |
              echo "


              #!/bin/bash
              #!/bin/bash

              #Install Java to get keytool
              yum update -y
              yum install java-1.8.0-openjdk -y
              curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.6/2023-01-30/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              kubectl version --short --client

              #Create a directory to create a Keystore
              mkdir $KEY_STORE_DIRECTORY
              cd $KEY_STORE_DIRECTORY


              # Import the CA certificate into the Keystore
              keytool -import \
                  -alias $KEY_STORE_ALIAS \
                  -file $CERTS_DIRECTORY/ca.crt \
                  -keypass $KEY_STORE_KEYPASS \
                  -storepass $KEY_STORE_STORE_PASS \
                  -keystore $KEY_STORE_NAME.jks \
                  -noprompt

              # Import the TLS private key into the Keystore
              keytool -importkeystore \
                  -srckeystore $CERTS_DIRECTORY/$P12_FILE_NAME.p12 \
                  -destkeystore $KEY_STORE_NAME.jks \
                  -srcstorepass $KEY_STORE_SRC_STORE_PASS \
                  -keypass $KEY_STORE_KEYPASS \
                  -storepass $KEY_STORE_STORE_PASS \
                  -srcstoretype PKCS12


              # Push the encrypted JKS file to K8s Secret
              kubectl create secret generic $K8S_APP_SECRET_NAME -n $K8S_APP_NAMESPACE  \
                  --from-file=$KEY_STORE_DIRECTORY/$KEY_STORE_NAME.jks --dry-run=client -o yaml > K8S_APP_SECRET_NAME-K8S_APP_NAMESPACE.yaml

              kubectl apply -f  K8S_APP_SECRET_NAME-K8S_APP_NAMESPACE.yaml  \
                  --token $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

              " > /tmp/cert-issuer-job.sh &&
              chmod u+x /tmp/cert-issuer-job.sh
              bash /tmp/cert-issuer-job.sh
              sleep infinity

      volumes:
        - name: certs
          csi:
            driver: csi.cert-manager.io
            readOnly: true
            volumeAttributes:
                  csi.cert-manager.io/common-name: "sample-app.svc.aws.example.net"
                  csi.cert-manager.io/dns-names: >-
                    sample-app.svc.aws.example.net
                    sample-app.svc.cluster.local
                  csi.cert-manager.io/issuer-kind: AWSPCAClusterIssuer
                  cert-manager.io/issuer: AWSPCAIssuer
                  cert-manager.io/cluster-issuer: sample-app-ca
                  csi.cert-manager.io/issuer-name: sample-app-ca
                  csi.cert-manager.io/issuer-group: awspca.cert-manager.io
                  csi.cert-manager.io/fs-group: "1000"
                  csi.cert-manager.io/duration: 8766h #1 year
                  csi.cert-manager.io/renew-before: "0m"
                  csi.cert-manager.io/key-usages: server auth,client auth
                  csi.cert-manager.io/pkcs12-enable: "true"
                  csi.cert-manager.io/pkcs12-password: password
                  csi.cert-manager.io/certificate-file: tls.crt
                  csi.cert-manager.io/ca-file: ca.crt
                  csi.cert-manager.io/privatekey-file: tls.key
